var documenterSearchIndex = {"docs":
[{"location":"manual/#StateSpaceLearning","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"StateSpaceLearning.jl is a package for modeling and forecasting time series in a high-dimension regression framework.","category":"page"},{"location":"manual/#Quickstart","page":"StateSpaceLearning","title":"Quickstart","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using StateSpaceLearning\n\ny = randn(100)\n\n# Instantiate Model\nmodel = StructuralModel(y)\n\n# Fit Model\nfit!(model)\n\n# Point Forecast\nprediction = StateSpaceLearning.forecast(model, 12) #Gets a 12 steps ahead prediction\n\n# Scenarios Path Simulation\nsimulation = StateSpaceLearning.simulate(model, 12, 1000) #Gets 1000 scenarios path of 12 steps ahead predictions","category":"page"},{"location":"manual/#StructuralModel-Arguments","page":"StateSpaceLearning","title":"StructuralModel Arguments","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"y::Vector: Vector of data.\nlevel::Bool: Boolean where to consider intercept in the model (default: true)\nstochastic_level::Bool: Boolean where to consider stochastic level component in the model (default: true)\ntrend::Bool: Boolean where to consider trend component in the model (default: true)\nstochastic_trend::Bool: Boolean where to consider stochastic trend component in the model (default: true)\nseasonal::Bool: Boolean where to consider seasonal component in the model (default: true)\nstochastic_seasonal::Bool: Boolean where to consider stochastic seasonal component in the model (default: true)\nfreq_seasonal::Int: Seasonal frequency to be considered in the model (default: 12)\noutlier::Bool: Boolean where to consider outlier component in the model (default: true)\nζ_ω_threshold::Int: Argument to stabilize stochastic trend and stochastic seasonal components (default: 12)","category":"page"},{"location":"manual/#Features","page":"StateSpaceLearning","title":"Features","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Current features include:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Estimation\nComponents decomposition\nForecasting\nCompletion of missing values\nPredefined models, including:\nOutlier detection\nOutlier robust models","category":"page"},{"location":"manual/#Quick-Examples","page":"StateSpaceLearning","title":"Quick Examples","text":"","category":"section"},{"location":"manual/#Fitting,-forecasting-and-simulating","page":"StateSpaceLearning","title":"Fitting, forecasting and simulating","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example of fit and forecast for the air passengers time-series.","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nsteps_ahead = 30\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\nprediction_log = StateSpaceLearning.forecast(model, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\nprediction = exp.(prediction_log)\n\nplot(airp.passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nplot!(vcat(ones(length(log_air_passengers)).*NaN, prediction), lab = \"Forecast\", w=2, color = \"blue\")","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: quick_example_airp)","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"N_scenarios = 1000\nsimulation = StateSpaceLearning.simulate(model, steps_ahead, N_scenarios) # arguments are the output of the fitted model, number of steps ahead the user wants to forecast and number of scenario paths\n\nplot(airp.passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nfor s in 1:N_scenarios-1\n    plot!(vcat(ones(length(log_air_passengers)).*NaN, exp.(simulation[:, s])), lab = \"\", α = 0.1 , color = \"red\")\nend\nplot!(vcat(ones(length(log_air_passengers)).*NaN, exp.(simulation[:, N_scenarios])), lab = \"Scenarios Paths\", α = 0.1 , color = \"red\")\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: airp_sim)","category":"page"},{"location":"manual/#Component-Extraction","page":"StateSpaceLearning","title":"Component Extraction","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example on how to perform component extraction in time series utilizing StateSpaceLearning.","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\nlevel = model.output.components[\"μ1\"][\"Values\"] + model.output.components[\"ξ\"][\"Values\"]\nslope = model.output.components[\"ν1\"][\"Values\"] + model.output.components[\"ζ\"][\"Values\"]\nseasonal = model.output.components[\"γ1\"][\"Values\"] + model.output.components[\"ω\"][\"Values\"]\ntrend = level + slope\n\nplot(trend, w=2 , color = \"Black\", lab = \"Trend Component\", legend = :outerbottom)\nplot(seasonal, w=2 , color = \"Black\", lab = \"Seasonal Component\", legend = :outerbottom)\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"| (Image: quick_example_trend) | (Image: quick_example_seas)| |:–––––––––––––––:|:––––––––––––––-:|","category":"page"},{"location":"manual/#Best-Subset-Selection","page":"StateSpaceLearning","title":"Best Subset Selection","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example on how to perform best subset selection in time series utilizing StateSpaceLearning.","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using StateSpaceLearning\nusing CSV\nusing DataFrames\nusing Random\n\nRandom.seed!(2024)\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nX = rand(length(log_air_passengers), 10) # Create 10 exogenous features \nβ = rand(3)\n\ny = log_air_passengers + X[:, 1:3]*β # add to the log_air_passengers series a contribution from only 3 exogenous features.\n\nmodel = StructuralModel(y; Exogenous_X = X)\nfit!(model; α = 1.0, information_criteria = \"bic\", ϵ = 0.05, penalize_exogenous = true, penalize_initial_states = true)\n\nSelected_exogenous = model.output.components[\"Exogenous_X\"][\"Selected\"]\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"In this example, the selected exogenous features were 1, 2, 3, as expected.","category":"page"},{"location":"manual/#Missing-values-imputation","page":"StateSpaceLearning","title":"Missing values imputation","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example of completion of missing values for the air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nairpassengers = Float64.(airp.passengers)\nlog_air_passengers[60:72] .= NaN\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\nfitted_completed_missing_values = ones(144).*NaN; fitted_completed_missing_values[60:72] = exp.(model.output.fitted[60:72])\nreal_removed_valued = ones(144).*NaN; real_removed_valued[60:72] = deepcopy(airp.passengers[60:72])\nairpassengers[60:72] .= NaN\n\nplot(airpassengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nplot!(real_removed_valued, lab = \"Real Removed Values\", w=2, color = \"red\")\nplot!(fitted_completed_missing_values, lab = \"Fit in Sample completed values\", w=2, color = \"blue\")\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"manual/#Outlier-Detection","page":"StateSpaceLearning","title":"Outlier Detection","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example of outlier detection for an altered air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nlog_air_passengers[60] = 10\nlog_air_passengers[30] = 1\nlog_air_passengers[100] = 2\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\ndetected_outliers = findall(i -> i != 0, model.output.components[\"o\"][\"Coefs\"])\n\nplot(log_air_passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nscatter!([detected_outliers], log_air_passengers[detected_outliers], lab = \"Detected Outliers\")\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"manual/#StateSpaceModels-initialization","page":"StateSpaceLearning","title":"StateSpaceModels initialization","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example on how to use StateSpaceLearning to initialize  StateSpaceModels","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing StateSpaceModels\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\nresiduals_variances = model.output.residuals_variances\n\nss_model = BasicStructural(log_air_passengers, 12)\nset_initial_hyperparameters!(ss_model, Dict(\"sigma2_ε\" => residuals_variances[\"ε\"], \n                                         \"sigma2_ξ\" =>residuals_variances[\"ξ\"], \n                                         \"sigma2_ζ\" =>residuals_variances[\"ζ\"], \n                                         \"sigma2_ω\" =>residuals_variances[\"ω\"]))\nStateSpaceModels.fit!(ss_model)","category":"page"},{"location":"manual/#Paper-Results-Reproducibility","page":"StateSpaceLearning","title":"Paper Results Reproducibility","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The paper has two experiments (results for the M4 competition and a simulation study). To reproduce each experiment follow the instructions below:","category":"page"},{"location":"manual/#M4-Experiment","page":"StateSpaceLearning","title":"M4 Experiment","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"To reproduce M4 paper results you can clone the repository and run the following commands on terminal:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"julia paper_tests/m4_test/m4_test.jl\npython paper_tests/m4_test/m4_test.py","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The results for SSL model in terms of MASE and sMAPE for all 48000 series will be stored in folder \"papertests/m4test/resultsSSL\". The average results of MASE, sMAPE and OWA will be saved in file \"papertests/m4test/metricresults/SSLMETRICSRESULTS.csv\".","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The results for SS model in terms of MASE and sMAPE for all 48000 series will be stored in folder \"papertests/m4test/resultsSS\". The average results of MASE, sMAPE and OWA will be saved in file \"papertests/m4test/metricresults/SSMETRICSRESULTS.csv\".","category":"page"},{"location":"manual/#Simulation-Experiment","page":"StateSpaceLearning","title":"Simulation Experiment","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"To reproduce the simulation results you can clone the repository and run the following commands on terminal:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"julia paper_tests/simulation_test/simulation.jl 0","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"As this test takes a long time, you may want to run it in parallel, for that you can change the last argument to be number of workers to use in the parallelization:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"julia paper_tests/simulation_test/simulation.jl 3","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The results will be saved in two separated files: \"papertests/simulationtest/resultsmetrics/metricsconfusionmatrix.csv\" and \"papertests/simulationtest/resultsmetrics/metricsbiasmse.csv\"","category":"page"},{"location":"manual/#Contributing","page":"StateSpaceLearning","title":"Contributing","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"PRs such as adding new models and fixing bugs are very welcome!\nFor nontrivial changes, you'll probably want to first discuss the changes via issue.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:100%; height:150px;border-width:4px;border-style:solid;padding-top:25px;\n        border-color:#000;border-radius:10px;text-align:center;background-color:#99DDFF;\n        color:#000\">\n    <h3 style=\"color: black;\">Star us on GitHub!</h3>\n    <a class=\"github-button\" href=\"https://github.com/LAMPSPUC/StateSpaceLearning.jl\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star LAMPSPUC/StateSpaceLearning.jl on GitHub\" style=\"margin:auto\">Star</a>\n    <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</div>","category":"page"},{"location":"#StateSpaceLearning.jl-Documentation","page":"Home","title":"StateSpaceLearning.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StateSpaceLearning.jl is a package for modeling and forecasting time series in a high-dimension regression framework.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is registered so you can simply add it using Julia's Pkg manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg.add(\"StateSpaceLearning\")","category":"page"},{"location":"#Citing-StateSpaceLearning.jl","page":"Home","title":"Citing StateSpaceLearning.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use StateSpaceLearning.jl in your work, we kindly ask you to cite the following preprint (pdf):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{ramos2024timeseriesanalysisstate,       title={Time Series Analysis by State Space Learning},        author={André Ramos and Davi Valladão and Alexandre Street},       year={2024},       eprint={2408.09120},       archivePrefix={arXiv},       primaryClass={stat.ML},       url={https://arxiv.org/abs/2408.09120},  }","category":"page"}]
}
