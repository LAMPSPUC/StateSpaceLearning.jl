var documenterSearchIndex = {"docs":
[{"location":"adapting_package/#Add-New-Models","page":"Add New Models","title":"Add New Models","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"The StateSpaceLearning framework supports any additive state space formulation. This section illustrates how to utilize the framework for a specific model.","category":"page"},{"location":"adapting_package/#Local-Level-Model","page":"Add New Models","title":"Local Level Model","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"Although the Local Level Model is already implemented within the scope of unobserved components, we use it here as an example. To incorporate a new model, it is necessary to create a dictionary containing the model inputs and another dictionary containing three functions (create_X, get_components_indexes, and get_variances).","category":"page"},{"location":"adapting_package/#Model-Inputs","page":"Add New Models","title":"Model Inputs","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"For the Local Level Model, no parameters are needed. Thus, the model input can be created as:","category":"page"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"model_input = Dict()","category":"page"},{"location":"adapting_package/#create_X","page":"Add New Models","title":"create_X","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"The create_X function constructs the matrices in the State Space Learning format. It must accept the following inputs: (model_input::Dict, Exogenous_X::Matrix{Fl}, steps_ahead::Int64=0, Exogenous_Forecast::Matrix{Fl}). It must return a matrix.","category":"page"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"function create_X_LocalLevel(model_input::Dict, Exogenous_X::Matrix{Fl},\n                  steps_ahead::Int64=0, Exogenous_Forecast::Matrix{Fl}=zeros(steps_ahead, size(Exogenous_X, 2))) where Fl\n    T = size(Exogenous_X, 1)\n    initial_states_matrix = ones(T+steps_ahead, 1)\n    ξ_matrix = Matrix{Float64}(undef, T+steps_ahead, T - 1)\n    for t in 1:T+steps_ahead\n        ξ_matrix[t, :] = t < T ? vcat(ones(t-1), zeros(T-t)) : ones(T-1)\n    end\n    \n    return hcat(initial_states_matrix, ξ_matrix)\nend","category":"page"},{"location":"adapting_package/#get_components_indexes","page":"Add New Models","title":"get_components_indexes","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"The get_components_indexes function outputs a dictionary indicating the indexes of each model component, including a set of indexes for all initial states. For the Local Level Model, the only components are the initial state μ1 and its innovations ξ. The function must accept the following inputs: (Exogenous_X::Matrix{Fl}, model_input::Dict). It must return a dictionary.","category":"page"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"function get_components_indexes_LocalLevel(Exogenous_X::Matrix{Fl}, model_input::Dict)::Dict where Fl\n    T = size(Exogenous_X, 1)\n    μ1_indexes = [1]\n    initial_states_indexes = [1]\n    ξ_indexes = collect(2:T)\n    return Dict(\"μ1\" => μ1_indexes, \"ξ\" => ξ_indexes, \"initial_states\" => initial_states_indexes)\nend","category":"page"},{"location":"adapting_package/#get_variances","page":"Add New Models","title":"get_variances","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"The get_variances function calculates the variances of the innovations and residuals. It must accept the following inputs:(ε::Vector{Fl}, coefs::Vector{Fl}, components_indexes::Dict{String, Vector{Int64}}). It must return a dictionary.","category":"page"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"function get_variances_LocalLevel(ε::Vector{Fl}, coefs::Vector{Fl}, components_indexes::Dict{String, Vector{Int64}})::Dict where Fl\n    \n    variances = Dict()\n    variances[\"ξ\"] = var(coefs[components_indexes[\"ξ\"]])\n    variances[\"ε\"] = var(ε)\n    return variances\nend","category":"page"},{"location":"adapting_package/#Running-the-new-model","page":"Add New Models","title":"Running the new model","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"To test the new model, run the fit_model function with the new inputs:","category":"page"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"using StateSpaceLearning\nusing Statistics\n\ny = randn(100)\n\n#Fit Model\noutput = StateSpaceLearning.fit_model(y; model_input = model_input, model_functions = Dict(\"create_X\" => create_X_LocalLevel, \n                                       \"get_components_indexes\" =>   get_components_indexes_LocalLevel, \"get_variances\" => get_variances_LocalLevel))","category":"page"},{"location":"adapting_package/#Changing-Estimation-Procedure","page":"Add New Models","title":"Changing Estimation Procedure","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"The current estimation procedure is based on an Adaptive Lasso. However, alternative methods can be chosen within the StateSpaceLearning framework. Below is an example of how to implement a simple model that minimizes the sum of squares of the residuals. This requires creating two variables: a dictionary estimation_input (which is empty in this case) and a function estimation_function with the following arguments:(EstimationX::Matrix{Tl}, estimation\\y::Vector{Fl}, components_indexes::Dict{String, Vector{Int64}}, estimation_input::Dict). The function should return a tuple containing the model coefficients and residuals.","category":"page"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"estimation_input = Dict()\nfunction estimation_function_min_sq(Estimation_X::Matrix{Tl}, estimation_y::Vector{Fl}, components_indexes::Dict{String, Vector{Int64}}, estimation_input::Dict) where {Tl, Fl}\n    mq_coefs = Estimation_X \\ estimation_y\n    mq_res = estimation_y - (Estimation_X * mq_coefs)\n    return mq_coefs, mq_res\nend","category":"page"},{"location":"adapting_package/#Running-the-model-with-the-new-estimation-procedure","page":"Add New Models","title":"Running the model with the new estimation procedure","text":"","category":"section"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"using StateSpaceLearning\n\ny = randn(100)\n\n#Fit Model\noutput = StateSpaceLearning.fit_model(y; estimation_input = estimation_input, estimation_function = estimation_function_min_sq)","category":"page"},{"location":"adapting_package/","page":"Add New Models","title":"Add New Models","text":"By following these steps, you can customize and extend the StateSpaceLearning framework to suit a variety of state space models and estimation procedures.","category":"page"},{"location":"manual/#StateSpaceLearning","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"StateSpaceLearning.jl is a package for modeling and forecasting time series in a high-dimension regression framework.","category":"page"},{"location":"manual/#Quickstart","page":"StateSpaceLearning","title":"Quickstart","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using StateSpaceLearning\n\ny = randn(100)\n\n#Fit Model\noutput = StateSpaceLearning.fit_model(y)\n\n#Main output options \nmodel_input         = output.model_input # Model inputs that were utilized to build the regression matrix.\nCreate_X            = output.Create_X # The function utilized to build the regression matrix.\nX                   = output.X # High Dimension Regression utilized in the estimation.\ncoefs               = output.coefs # High Dimension Regression coefficients estimated in the estimation.\nε                   = output.ε # Residuals of the model.\nfitted              = output.fitted # Fit in Sample of the model.\ncomponents          = output.components # Dictionary containing information about each component of the model, each component has the keys: \"Values\" (The value of the component in each timestamp) , \"Coefs\" (The coefficients estimated for each element of the component) and \"Indexes\" (The indexes of the elements of the component in the high dimension regression \"X\").\nresiduals_variances = output.residuals_variances # Dictionary containing the estimated variances for the innovations components (that is the information that can be utilized to initialize the state space model).\nvalid_indexes       = output.valid_indexes # Vector containing valid indexes of the time series (non valid indexes represent NaN values in the time series).\n\n#Forecast\nprediction = StateSpaceLearning.forecast(output, 12) #Gets a 12 steps ahead prediction\n","category":"page"},{"location":"manual/#Fit-Arguments","page":"StateSpaceLearning","title":"Fit Arguments","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"y::Vector{Fl}: Vector of data.\nmodel_input::Dict: Dictionary containing the model input parameters (default: Dict(\"level\" => true, \"stochastic_level\" => true, \"trend\" => true, \"stochastic_trend\" => true, \"seasonal\" => true, \"stochastic_seasonal\" => true, \"freq_seasonal\" => 12, \"outlier\" => true, , \"ζ_ω_threshold\" => 12)).\nmodel_functions::Dict: Dictionary containing the model functions (default: Dict(\"create_X\" => create_X, \"get_components_indexes\" => get_components_indexes, \"get_variances\" => get_variances)).\nestimation_input::Dict: Dictionary containing the estimation input parameters (default: Dict(\"α\" => 0.1, \"information_criteria\" => \"aic\", ψ => 0.05, \"penalize_exogenous\" => true, \"penalize_initial_states\" => true)).\nestimation_function::Function: Estimation function (default: default_estimation_procedure).\nExogenous_X::Union{Matrix{Fl}, Missing}: Exogenous variables matrix (default: missing).","category":"page"},{"location":"manual/#Features","page":"StateSpaceLearning","title":"Features","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Current features include:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Estimation\nComponents decomposition\nForecasting\nCompletion of missing values\nPredefined models, including:\nOutlier detection\nOutlier robust models","category":"page"},{"location":"manual/#Quick-Examples","page":"StateSpaceLearning","title":"Quick Examples","text":"","category":"section"},{"location":"manual/#Fitting,-forecasting-and-simulating","page":"StateSpaceLearning","title":"Fitting, forecasting and simulating","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example of fit and forecast for the air passengers time-series.","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nsteps_ahead = 30\n\noutput = StateSpaceLearning.fit_model(log_air_passengers)\nprediction_log = StateSpaceLearning.forecast(output, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\nprediction = exp.(prediction_log)\n\nplot(airp.passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nplot!(vcat(ones(length(log_air_passengers)).*NaN, prediction), lab = \"Forecast\", w=2, color = \"blue\")","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: quick_example_airp)","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"N_scenarios = 1000\nsimulation = StateSpaceLearning.simulate(output, steps_ahead, N_scenarios) # arguments are the output of the fitted model, number of steps ahead the user wants to forecast and number of scenario paths\n\nplot(airp.passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nfor s in 1:N_scenarios-1\n    plot!(vcat(ones(length(log_air_passengers)).*NaN, exp.(simulation[:, s])), lab = \"\", α = 0.1 , color = \"red\")\nend\nplot!(vcat(ones(length(log_air_passengers)).*NaN, exp.(simulation[:, N_scenarios])), lab = \"Scenarios Paths\", α = 0.1 , color = \"red\")\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: airp_sim)","category":"page"},{"location":"manual/#Component-Extraction","page":"StateSpaceLearning","title":"Component Extraction","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example on how to perform component extraction in time series utilizing StateSpaceLearning.","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\noutput = StateSpaceLearning.fit_model(log_air_passengers)\n\nlevel = output.components[\"μ1\"][\"Values\"] + output.components[\"ξ\"][\"Values\"]\nslope = output.components[\"ν1\"][\"Values\"] + output.components[\"ζ\"][\"Values\"]\nseasonal = output.components[\"γ1\"][\"Values\"] + output.components[\"ω\"][\"Values\"]\ntrend = level + slope\n\nplot(trend, w=2 , color = \"Black\", lab = \"Trend Component\", legend = :outerbottom)\nplot(seasonal, w=2 , color = \"Black\", lab = \"Seasonal Component\", legend = :outerbottom)\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: quick_example_trend) (Image: quick_example_seas)","category":"page"},{"location":"manual/#Best-Subset-Selection","page":"StateSpaceLearning","title":"Best Subset Selection","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example on how to perform best subset selection in time series utilizing StateSpaceLearning.","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using StateSpaceLearning\nusing CSV\nusing DataFrames\nusing Random\n\nRandom.seed!(2024)\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nX = rand(length(log_air_passengers), 10) # Create 10 exogenous features \nβ = rand(3)\n\ny = log_air_passengers + X[:, 1:3]*β # add to the log_air_passengers series a contribution from only 3 exogenous features.\n\noutput = StateSpaceLearning.fit_model(y; Exogenous_X = X, estimation_input = Dict(\"α\" => 1.0, \"information_criteria\" => \"bic\", \"ε\" => 0.05, \"penalize_exogenous\" => true, \"penalize_initial_states\" => true))\n\nSelected_exogenous = output.components[\"Exogenous_X\"][\"Selected\"]\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"In this example, the selected exogenous features were 1, 2, 3, as expected.","category":"page"},{"location":"manual/#Missing-values-imputation","page":"StateSpaceLearning","title":"Missing values imputation","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example of completion of missing values for the air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nairpassengers = Float64.(airp.passengers)\nlog_air_passengers[60:72] .= NaN\n\noutput = StateSpaceLearning.fit_model(log_air_passengers)\n\nfitted_completed_missing_values = ones(144).*NaN; fitted_completed_missing_values[60:72] = exp.(output.fitted[60:72])\nreal_removed_valued = ones(144).*NaN; real_removed_valued[60:72] = deepcopy(airp.passengers[60:72])\nairpassengers[60:72] .= NaN\n\nplot(airpassengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nplot!(real_removed_valued, lab = \"Real Removed Values\", w=2, color = \"red\")\nplot!(fitted_completed_missing_values, lab = \"Fit in Sample completed values\", w=2, color = \"blue\")\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"manual/#Outlier-Detection","page":"StateSpaceLearning","title":"Outlier Detection","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example of outlier detection for an altered air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nlog_air_passengers[60] = 10\nlog_air_passengers[30] = 1\nlog_air_passengers[100] = 2\n\noutput = StateSpaceLearning.fit_model(log_air_passengers)\ndetected_outliers = findall(i -> i != 0, output.components[\"o\"][\"Coefs\"])\n\nplot(log_air_passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nscatter!([detected_outliers], log_air_passengers[detected_outliers], lab = \"Detected Outliers\")\n","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"manual/#StateSpaceModels-initialization","page":"StateSpaceLearning","title":"StateSpaceModels initialization","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"Quick example on how to use StateSpaceLearning to initialize  StateSpaceModels","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"using CSV\nusing DataFrames\nusing StateSpaceModels\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\noutput = StateSpaceLearning.fit_model(log_air_passengers)\nresiduals_variances = output.residuals_variances\n\nmodel = BasicStructural(log_air_passengers, 12)\nset_initial_hyperparameters!(model, Dict(\"sigma2_ε\" => residuals_variances[\"ε\"], \n                                         \"sigma2_ξ\" =>residuals_variances[\"ξ\"], \n                                         \"sigma2_ζ\" =>residuals_variances[\"ζ\"], \n                                         \"sigma2_ω\" =>residuals_variances[\"ω\"]))\nfit!(model)","category":"page"},{"location":"manual/#Paper-Results-Reproducibility","page":"StateSpaceLearning","title":"Paper Results Reproducibility","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The paper has two experiments (results for the M4 competition and a simulation study). To reproduce each experiment follow the instructions below:","category":"page"},{"location":"manual/#M4-Experiment","page":"StateSpaceLearning","title":"M4 Experiment","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"To reproduce M4 paper results you can clone the repository and run the following commands on terminal:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"julia paper_tests/m4_test/m4_test.jl\npython paper_tests/m4_test/m4_test.py","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The results for SSL model in terms of MASE and sMAPE for all 48000 series will be stored in folder \"paper_tests/m4_test/results_SSL\". The average results of MASE, sMAPE and OWA will be saved in file \"paper_tests/m4_test/metric_results/SSL_METRICS_RESULTS.csv\".","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The results for SS model in terms of MASE and sMAPE for all 48000 series will be stored in folder \"paper_tests/m4_test/results_SS\". The average results of MASE, sMAPE and OWA will be saved in file \"paper_tests/m4_test/metric_results/SS_METRICS_RESULTS.csv\".","category":"page"},{"location":"manual/#Simulation-Experiment","page":"StateSpaceLearning","title":"Simulation Experiment","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"To reproduce the simulation results you can clone the repository and run the following commands on terminal:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"julia paper_tests/simulation_test/simulation.jl 0","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"As this test takes a long time, you may want to run it in parallel, for that you can change the last argument to be number of workers to use in the parallelization:","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"julia paper_tests/simulation_test/simulation.jl 3","category":"page"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"The results will be saved in two separated files: \"paper_tests/simulation_test/results_metrics/metrics_confusion_matrix.csv\" and \"paper_tests/simulation_test/results_metrics/metrics_bias_mse.csv\"","category":"page"},{"location":"manual/#Contributing","page":"StateSpaceLearning","title":"Contributing","text":"","category":"section"},{"location":"manual/","page":"StateSpaceLearning","title":"StateSpaceLearning","text":"PRs such as adding new models and fixing bugs are very welcome!\nFor nontrivial changes, you'll probably want to first discuss the changes via issue.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:100%; height:150px;border-width:4px;border-style:solid;padding-top:25px;\n        border-color:#000;border-radius:10px;text-align:center;background-color:#99DDFF;\n        color:#000\">\n    <h3 style=\"color: black;\">Star us on GitHub!</h3>\n    <a class=\"github-button\" href=\"https://github.com/LAMPSPUC/StateSpaceLearning.jl\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star LAMPSPUC/StateSpaceLearning.jl on GitHub\" style=\"margin:auto\">Star</a>\n    <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</div>","category":"page"},{"location":"#StateSpaceLearning.jl-Documentation","page":"Home","title":"StateSpaceLearning.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StateSpaceLearning.jl is a package for modeling and forecasting time series in a high-dimension regression framework.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is registered so you can simply add it using Julia's Pkg manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg.add(\"StateSpaceLearning\")","category":"page"},{"location":"#Citing-StateSpaceLearning.jl","page":"Home","title":"Citing StateSpaceLearning.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use StateSpaceLearning.jl in your work, we kindly ask you to cite the following preprint (pdf):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{ramos2024timeseriesanalysisstate,       title={Time Series Analysis by State Space Learning},        author={André Ramos and Davi Valladão and Alexandre Street},       year={2024},       eprint={2408.09120},       archivePrefix={arXiv},       primaryClass={stat.ML},       url={https://arxiv.org/abs/2408.09120},  }","category":"page"}]
}
