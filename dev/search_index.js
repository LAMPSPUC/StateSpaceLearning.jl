var documenterSearchIndex = {"docs":
[{"location":"features/#Extra-Features","page":"Extra Features","title":"Extra Features","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"In addition to forecasting and scenario simulation, StateSpaceLearningjl provides several other functionalities, including component extraction, missing value inputation, outlier detection, and best subset selection.","category":"page"},{"location":"features/#Component-Extraction","page":"Extra Features","title":"Component Extraction","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example on how to perform component extraction in time series utilizing StateSpaceLearning.","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\nlevel = model.output.components[\"μ1\"][\"Values\"] + model.output.components[\"ξ\"][\"Values\"]\nslope = model.output.components[\"ν1\"][\"Values\"] + model.output.components[\"ζ\"][\"Values\"]\nseasonal = model.output.components[\"γ1_12\"][\"Values\"] + model.output.components[\"ω_12\"][\"Values\"]\ntrend = level + slope\n\nplot(trend, w=2 , color = \"Black\", lab = \"Trend Component\", legend = :outerbottom)\nplot(seasonal, w=2 , color = \"Black\", lab = \"Seasonal Component\", legend = :outerbottom)\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"| (Image: quick_example_trend) | (Image: quick_example_seas)|","category":"page"},{"location":"features/#Missing-Value-Imputation","page":"Extra Features","title":"Missing Value Imputation","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example of completion of missing values for the air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nairpassengers = AbstractFloat.(airp.passengers)\nlog_air_passengers[60:72] .= NaN\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\nfitted_completed_missing_values = ones(144).*NaN; fitted_completed_missing_values[60:72] = exp.(model.output.fitted[60:72])\nreal_removed_valued = ones(144).*NaN; real_removed_valued[60:72] = deepcopy(airp.passengers[60:72])\nairpassengers[60:72] .= NaN\n\nplot(airpassengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nplot!(real_removed_valued, lab = \"Real Removed Values\", w=2, color = \"red\")\nplot!(fitted_completed_missing_values, lab = \"Fit in Sample completed values\", w=2, color = \"blue\")\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"features/#Outlier-Detection","page":"Extra Features","title":"Outlier Detection","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example of outlier detection for an altered air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nlog_air_passengers[60] = 10\nlog_air_passengers[30] = 1\nlog_air_passengers[100] = 2\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\ndetected_outliers = findall(i -> i != 0, model.output.components[\"o\"][\"Coefs\"])\n\nplot(log_air_passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nscatter!([detected_outliers], log_air_passengers[detected_outliers], lab = \"Detected Outliers\")\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"features/#Best-Subset-Selection","page":"Extra Features","title":"Best Subset Selection","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example on how to perform best subset selection in time series utilizing StateSpaceLearning.","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using StateSpaceLearning\nusing CSV\nusing DataFrames\nusing Random\n\nRandom.seed!(2024)\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nX = rand(length(log_air_passengers), 10) # Create 10 exogenous features \nβ = rand(3)\n\ny = log_air_passengers + X[:, 1:3]*β # add to the log_air_passengers series a contribution from only 3 exogenous features.\n\nmodel = StructuralModel(y; Exogenous_X = X)\nfit!(model; α = 1.0, information_criteria = \"bic\", ϵ = 0.05, penalize_exogenous = true, penalize_initial_states = true)\n\nSelected_exogenous = model.output.components[\"Exogenous_X\"][\"Selected\"]\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"In this example, the selected exogenous features were 1, 2, 3, as expected.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this page, we present examples of applications and use cases for the package.","category":"page"},{"location":"examples/#Univariate-Forecast","page":"Examples","title":"Univariate Forecast","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here we forecast the US airline passengers from 1949 to 1960.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nT = length(log_air_passengers)\nsteps_ahead = 30\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\nprediction_log = StateSpaceLearning.forecast(model, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\nprediction = exp.(prediction_log)\n\nplot_point_forecast(airp.passengers, prediction)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: quick_example_airp)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"N_scenarios = 1000\nsimulation = StateSpaceLearning.simulate(model, steps_ahead, N_scenarios) # arguments are the output of the fitted model, number of steps ahead the user wants to forecast and number of scenario paths\n\nplot_scenarios(airp.passengers, exp.(simulation))\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: airp_sim)","category":"page"},{"location":"examples/#Forecasting-intermittent-series","page":"Examples","title":"Forecasting intermittent series","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The StateSpaceLearningjl package offers a convenient approach for managing intermittent series. Within the simulate function, the seasonal_innovation_simulation hyperparameter can be configured to ensure that the variability in the simulations also exhibits a seasonal pattern.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We first execute the code with the default parameters to highlight the importance of adapting the model to handle this type of time series effectively:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.ARTIFICIAL_SOLARS) |> DataFrame\ny = solars[!, \"y1\"]\nT = length(y)\nsteps_ahead = 48\n\nmodel = StructuralModel(y; freq_seasonal=24, trend=false, level=false)\nfit!(model; penalize_initial_states=false)\nsimulation = StateSpaceLearning.simulate(model, steps_ahead, 100) #Gets a 12 steps ahead prediction\nplot_scenarios(y, simulation)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: solar_sim_raw)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now we present the results by setting the seasonal_innovation_simulation hyperparameter to 24 (given that it is a solar hourly time series).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.ARTIFICIAL_SOLARS) |> DataFrame\ny = solars[!, \"y1\"]\nT = length(y)\nsteps_ahead = 48\n\nmodel = StructuralModel(y; freq_seasonal=24, trend=false, level=false)\nfit!(model; penalize_initial_states=false)\nsimulation = StateSpaceLearning.simulate(model, steps_ahead, 100; seasonal_innovation_simulation=24) #Gets a 12 steps ahead prediction\nplot_scenarios(y, simulation)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: solar_sim_treated)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Thus, the model has demonstrated its capability to effectively capture the intermittent nature of the solar time series, providing a more accurate representation of its underlying characteristics.","category":"page"},{"location":"examples/#Forecasting-with-Multiple-Seasonality","page":"Examples","title":"Forecasting with Multiple Seasonality","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The StateSpaceLearningjl package handles multiple seasonality by passing parameter freq_seasonal as a vector of Int in the StructuralModel instantiation.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We first execute the code considering a single daily seasonality (freq_seasonal=24) to highlight the importance of adapting the model to handle this type of time series effectively:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.HOURLY_M4_EXAMPLE) |> DataFrame\ny = solars[!, \"values\"]\nT = length(y)\nsteps_ahead = 168\n\nmodel = StructuralModel(y; freq_seasonal=24)\nfit!(model)\nprediction = StateSpaceLearning.forecast(model, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\n\nplot_point_forecast(y, prediction)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: one_seas)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that the model successfully captured the daily seasonality but, as expected, was unable to capture the weekly seasonality. We now present the results after setting the freq\\_seasonal hyperparameter to [24, 168], accounting for both daily and weekly seasonalities.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.HOURLY_M4_EXAMPLE) |> DataFrame\ny = solars[!, \"values\"]\nT = length(y)\nsteps_ahead = 168\n\nmodel = StructuralModel(y; freq_seasonal=[24, 168])\nfit!(model)\nprediction = StateSpaceLearning.forecast(model, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\n\nplot_point_forecast(y, prediction)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: two_seas)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that the model was able to capture both seasonalities in this case.","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Quickstart","page":"Manual","title":"Quickstart","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"While StateSpaceModels.jl offers a rich array of functionalities, diverse models, and flexible interfaces, most users primarily seek to achieve core tasks: fitting a model and generating forecasts. The following example provides a concise introduction to performing these essential operations effectively.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using StateSpaceLearning\n\ny = randn(100)\n\n# Instantiate Model\nmodel = StructuralModel(y)\n\n# Fit Model\nfit!(model)\n\n# Point Forecast\nprediction = StateSpaceLearning.forecast(model, 12) #Gets a 12 steps ahead prediction\n\n# Scenarios Path Simulation\nsimulation = StateSpaceLearning.simulate(model, 12, 1000) #Gets 1000 scenarios path of 12 steps ahead predictions","category":"page"},{"location":"manual/#Models","page":"Manual","title":"Models","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package currently supports the implementation of the StructuralModel. If you have suggestions for additional models to include, we encourage you to contribute by opening an issue or submitting a pull request.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceLearning.StructuralModel","category":"page"},{"location":"manual/#Main.StateSpaceLearning.StructuralModel","page":"Manual","title":"Main.StateSpaceLearning.StructuralModel","text":"Instantiates a Structural State Space Learning model.\n\nStructuralModel(\n    y::Union{Vector,Matrix};\n    level::Bool=true,\n    stochastic_level::Bool=true,\n    trend::Bool=true,\n    stochastic_trend::Bool=true,\n    seasonal::Bool=true,\n    stochastic_seasonal::Bool=true,\n    freq_seasonal::Union{Int, Vector{Int}}=12,\n    outlier::Bool=true,\n    ζ_ω_threshold::Int=12,\n    Exogenous_X::Matrix=if typeof(y) <: Vector\n        zeros(length(y), 0)\n    else\n        zeros(size(y, 1), 0)\n    end,\n)\n\nA Structural State Space Learning model that can have level, stochasticlevel, trend, stochastictrend, seasonal, stochastic_seasonal, outlier and Exogenous components. Each component should be specified by Booleans.\n\nThese models take the general form:\n\nbegingather*\n    beginaligned\n    y_1 = mu_1 + gamma_1 + X_1beta + sum_tau=1^1D_tau1 o_tau + varepsilon_1\r\n    y_2 = mu_1 + xi_2 + nu_1 + gamma_2 + X_2beta + sum_tau=1^2D_tau2 o_tau + varepsilon_2 \r\n    y_t = mu_1 + sum_tau=2^txi_tau  + (t-1)nu_1 + sum_tau=2^t-1(t-tau)zeta_tau + gamma_m_t + X_tbeta + sum_tau=1^tD_taut o_tau + varepsilon_t quad forall t = 3 ldots s labelcor_t2\r\n    y_t = mu_1  + sum_tau=2^txi_tau + (t-1)nu_1 + sum_tau=2^t-1(t-tau)zeta_tau + gamma_m_t + sum_tau in M_t(omega_tau -  omega_tau-1)+  X_tbeta + sum_tau=1^tD_taut o_tau + varepsilon_t quad forall t=s+1ldotsT \r\n    zeta_t xi_t omega_t =0  forall  t  T\n    endaligned\nendgather*\n\nThe notation is as follows: y_t represents the observation vector at time t, mu_1 denotes the initial level component (intercept), and xi_t refers to the stochastic level component. Similarly, nu_1 corresponds to the deterministic slope component, and zeta_t represents the stochastic slope component. The seasonal effects are described by gamma_m_t for the deterministic seasonal component and omega_tau for the stochastic seasonal component.\n\nThe exogenous component is represented by X, with beta as the associated coefficients. Outlier effects are captured by the dummy outlier matrix D and its corresponding coefficients o. Finally, varepsilon_t denotes the irregular term.\n\nReferences\n\nRamos, André, & Valladão, Davi, & Street, Alexandre. Time Series Analysis by State Space Learning\n\nExample\n\ny = rand(100)\nmodel = StructuralModel(y)\n\n\n\n\n\n","category":"type"},{"location":"manual/#Fitting","page":"Manual","title":"Fitting","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package currently only allows for the estimation procedure (based on the elastic net) presented in the paper \"Time Series Analysis by State Space Learning\". We allow some parameters configurations as detailed below. If you have suggestions for additional estimation procedures to include, we encourage you to contribute by opening an issue or submitting a pull request.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceLearning.fit!","category":"page"},{"location":"manual/#Main.StateSpaceLearning.fit!","page":"Manual","title":"Main.StateSpaceLearning.fit!","text":"Fits the StateSpaceLearning model using specified parameters and estimation procedures. After fitting, the model output can be accessed in model.output\n\nfit!(model::StateSpaceLearningModel,                     α::AbstractFloat = 0.1,                      information_criteria::String = \"aic\",                      ϵ::AbstractFloat = 0.05,                      penalize_exogenous::Bool = true,                      penalize_initial_states::Bool = true,                     )\n\nArguments\n\nmodel::StateSpaceLearningModel: Model to be fitted.\nα::AbstractFloat: Elastic net mixing parameter (default: 0.1).\ninformation_criteria::String: Method for hyperparameter selection (default: \"aic\").\nϵ::AbstractFloat: Non negative value to handle 0 coefs on the first lasso step (default: 0.05).\npenalize_exogenous::Bool: If true, penalize exogenous variables (default: true).\npenalize_initial_states::Bool: If true, penalize initial states (default: true).\n\nExample\n\ny = rand(100)\nmodel = StructuralModel(y)\nfit!(model)\noutput = model.output\n\n\n\n\n\n","category":"function"},{"location":"manual/#Forecasting-and-Simulating","page":"Manual","title":"Forecasting and Simulating","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package has functions to make point forecasts multiple steps ahead and to simulate scenarios based on those forecasts. These functions are implemented both for the univariate and to the multivariate cases.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceLearning.forecast","category":"page"},{"location":"manual/#Main.StateSpaceLearning.forecast","page":"Manual","title":"Main.StateSpaceLearning.forecast","text":"Returns the forecast for a given number of steps ahead using the provided StateSpaceLearning output and exogenous forecast data.\n\nforecast(model::StateSpaceLearningModel, steps_ahead::Int; Exogenous_Forecast::Union{Matrix{Fl}, Missing}=missing)::Vector{AbstractFloat} where Fl\n\nArguments\n\nmodel::StateSpaceLearningModel: Model obtained from fitting.\nsteps_ahead::Int: Number of steps ahead for forecasting.\nExogenous_Forecast::Matrix{Fl}: Exogenous variables forecast (default: zeros(steps_ahead, 0))\n\nReturns\n\nUnion{Matrix{AbstractFloat}, Vector{AbstractFloat}}: Matrix or vector of matrices containing forecasted values.\n\nExample\n\ny = rand(100)\nmodel = StructuralModel(y)\nfit!(model)\nsteps_ahead = 12\npoint_prediction = forecast(model, steps_ahead)\n\n\n\n\n\n","category":"function"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceLearning.simulate","category":"page"},{"location":"manual/#Main.StateSpaceLearning.simulate","page":"Manual","title":"Main.StateSpaceLearning.simulate","text":"Generate simulations for a given number of steps ahead using the provided StateSpaceLearning output and exogenous forecast data.\n\nsimulate(model::StateSpaceLearningModel, steps_ahead::Int, N_scenarios::Int;                                  Exogenous_Forecast::Matrix{Fl}=zeros(steps_ahead, 0))::Matrix{AbstractFloat} where Fl\n\nArguments\n\nmodel::StateSpaceLearningModel: Model obtained from fitting.\nsteps_ahead::Int: Number of steps ahead for simulation.\nN_scenarios::Int: Number of scenarios to simulate (default: 1000).\nExogenous_Forecast::Matrix{Fl}: Exogenous variables forecast (default: zeros(steps_ahead, 0))\n\nReturns\n\nUnion{Vector{Matrix{AbstractFloat}}, Matrix{AbstractFloat}}: Matrix or vector of matrices containing simulated values.\n\nExample (Univariate Case)\n\ny = rand(100)\nmodel = StructuralModel(y)\nfit!(model)\nsteps_ahead = 12\nN_scenarios = 1000\nsimulation  = simulate(model, steps_ahead, N_scenarios)\n\nExample (Multivariate Case)\n\ny = rand(100, 3)\nmodel = StructuralModel(y)\nfit!(model)\nsteps_ahead = 12\nN_scenarios = 1000\nsimulation  = simulate(model, steps_ahead, N_scenarios)\n\n\n\n\n\n","category":"function"},{"location":"manual/#Datasets","page":"Manual","title":"Datasets","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package includes several datasets designed to demonstrate its functionalities and showcase the models. These datasets are stored as CSV files, and their file paths can be accessed either by their names as shown below. In the examples, we utilize DataFrames.jl and CSV.jl to illustrate how to work with these datasets.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceLearning.AIR_PASSENGERS","category":"page"},{"location":"manual/#Main.StateSpaceLearning.AIR_PASSENGERS","page":"Manual","title":"Main.StateSpaceLearning.AIR_PASSENGERS","text":"AIR_PASSENGERS\n\nThe absolute path for the AIR_PASSENGERS dataset stored inside StateSpaceLearning.jl. This dataset provides monthly totals of a US airline passengers from 1949 to 1960.\n\nReferences\n\nhttps://www.stata-press.com/data/r12/ts.html\n\n\n\n\n\n","category":"constant"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceLearning.ARTIFICIAL_SOLARS","category":"page"},{"location":"manual/#Main.StateSpaceLearning.ARTIFICIAL_SOLARS","page":"Manual","title":"Main.StateSpaceLearning.ARTIFICIAL_SOLARS","text":"ARTIFICIAL_SOLARS\n\nThe absolute path for the ARTIFICIAL_SOLARS dataset stored inside StateSpaceLearning.jl. This dataset provides an hourly Multivariate Time Series for 3 artificial solar power plants.\n\n\n\n\n\n","category":"constant"},{"location":"manual/","page":"Manual","title":"Manual","text":"StateSpaceLearning.HOURLY_M4_EXAMPLE","category":"page"},{"location":"manual/#Main.StateSpaceLearning.HOURLY_M4_EXAMPLE","page":"Manual","title":"Main.StateSpaceLearning.HOURLY_M4_EXAMPLE","text":"HOURLY_M4_EXAMPLE\n\nThe absolute path for the HOURLY_M4_EXAMPLE dataset stored inside StateSpaceLearning.jl. This dataset provides an hourly Time Series from the M4 competition dataset.\n\nReferences\n\nhttps://github.com/Mcompetitions/M4-methods\n\n\n\n\n\n","category":"constant"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:100%; height:150px;border-width:4px;border-style:solid;padding-top:25px;\n        border-color:#000;border-radius:10px;text-align:center;background-color:#99DDFF;\n        color:#000\">\n    <h3 style=\"color: black;\">Star us on GitHub!</h3>\n    <a class=\"github-button\" href=\"https://github.com/LAMPSPUC/StateSpaceLearning.jl\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star LAMPSPUC/StateSpaceLearning.jl on GitHub\" style=\"margin:auto\">Star</a>\n    <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</div>","category":"page"},{"location":"#StateSpaceLearning.jl-Documentation","page":"Home","title":"StateSpaceLearning.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StateSpaceLearning.jl is a package for modeling and forecasting time series in a high-dimension regression framework.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is registered so you can simply add it using Julia's Pkg manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg.add(\"StateSpaceLearning\")","category":"page"},{"location":"#Citing-StateSpaceLearning.jl","page":"Home","title":"Citing StateSpaceLearning.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use StateSpaceLearning.jl in your work, we kindly ask you to cite the following preprint (pdf):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{ramos2024timeseriesanalysisstate,       title={Time Series Analysis by State Space Learning},        author={André Ramos and Davi Valladão and Alexandre Street},       year={2024},       eprint={2408.09120},       archivePrefix={arXiv},       primaryClass={stat.ML},       url={https://arxiv.org/abs/2408.09120},  }","category":"page"}]
}
