var documenterSearchIndex = {"docs":
[{"location":"features/#Extra-Features","page":"Extra Features","title":"Extra Features","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"In addition to forecasting and scenario simulation, StateSpaceLearningjl provides several other functionalities, including component extraction, missing value inputation, outlier detection, and best subset selection.","category":"page"},{"location":"features/#Component-Extraction","page":"Extra Features","title":"Component Extraction","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example on how to perform component extraction in time series utilizing StateSpaceLearning.","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\nlevel = model.output.components[\"μ1\"][\"Values\"] + model.output.components[\"ξ\"][\"Values\"]\nslope = model.output.components[\"ν1\"][\"Values\"] + model.output.components[\"ζ\"][\"Values\"]\nseasonal = model.output.components[\"γ1_12\"][\"Values\"] + model.output.components[\"ω_12\"][\"Values\"]\ntrend = level + slope\n\nplot(trend, w=2 , color = \"Black\", lab = \"Trend Component\", legend = :outerbottom)\nplot(seasonal, w=2 , color = \"Black\", lab = \"Seasonal Component\", legend = :outerbottom)\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"| (Image: quick_example_trend) | (Image: quick_example_seas)|","category":"page"},{"location":"features/#Missing-Value-Imputation","page":"Extra Features","title":"Missing Value Imputation","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example of completion of missing values for the air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nairpassengers = AbstractFloat.(airp.passengers)\nlog_air_passengers[60:72] .= NaN\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\nfitted_completed_missing_values = ones(144).*NaN; fitted_completed_missing_values[60:72] = exp.(model.output.fitted[60:72])\nreal_removed_valued = ones(144).*NaN; real_removed_valued[60:72] = deepcopy(airp.passengers[60:72])\nairpassengers[60:72] .= NaN\n\nplot(airpassengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nplot!(real_removed_valued, lab = \"Real Removed Values\", w=2, color = \"red\")\nplot!(fitted_completed_missing_values, lab = \"Fit in Sample completed values\", w=2, color = \"blue\")\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"features/#Outlier-Detection","page":"Extra Features","title":"Outlier Detection","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example of outlier detection for an altered air passengers time-series (artificial NaN values are added to the original time-series).","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using CSV\nusing DataFrames\nusing Plots\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\n\nlog_air_passengers[60] = 10\nlog_air_passengers[30] = 1\nlog_air_passengers[100] = 2\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\n\ndetected_outliers = findall(i -> i != 0, model.output.components[\"o\"][\"Coefs\"])\n\nplot(log_air_passengers, w=2 , color = \"Black\", lab = \"Historical\", legend = :outerbottom)\nscatter!([detected_outliers], log_air_passengers[detected_outliers], lab = \"Detected Outliers\")\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"(Image: quick_example_completion_airp)","category":"page"},{"location":"features/#Best-Subset-Selection","page":"Extra Features","title":"Best Subset Selection","text":"","category":"section"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"Quick example on how to perform best subset selection in time series utilizing StateSpaceLearning.","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"using StateSpaceLearning\nusing CSV\nusing DataFrames\nusing Random\n\nRandom.seed!(2024)\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nX = rand(length(log_air_passengers), 10) # Create 10 exogenous features \nβ = rand(3)\n\ny = log_air_passengers + X[:, 1:3]*β # add to the log_air_passengers series a contribution from only 3 exogenous features.\n\nmodel = StructuralModel(y; exog = X)\nfit!(model; α = 1.0, information_criteria = \"bic\", ϵ = 0.05, penalize_exogenous = true, penalize_initial_states = true)\n\nSelected_exogenous = model.output.components[\"exog\"][\"Selected\"]\n","category":"page"},{"location":"features/","page":"Extra Features","title":"Extra Features","text":"In this example, the selected exogenous features were 1, 2, 3, as expected.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this page, we present examples of applications and use cases for the package.","category":"page"},{"location":"examples/#Univariate-Forecast","page":"Examples","title":"Univariate Forecast","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here we forecast the US airline passengers from 1949 to 1960.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\nlog_air_passengers = log.(airp.passengers)\nT = length(log_air_passengers)\nsteps_ahead = 30\n\nmodel = StructuralModel(log_air_passengers)\nfit!(model)\nprediction_log = StateSpaceLearning.forecast(model, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\nprediction = exp.(prediction_log)\n\nplot_point_forecast(airp.passengers, prediction)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: quick_example_airp)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"N_scenarios = 1000\nsimulation = StateSpaceLearning.simulate(model, steps_ahead, N_scenarios) # arguments are the output of the fitted model, number of steps ahead the user wants to forecast and number of scenario paths\n\nplot_scenarios(airp.passengers, exp.(simulation))\n","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: airp_sim)","category":"page"},{"location":"examples/#Forecasting-intermittent-series","page":"Examples","title":"Forecasting intermittent series","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The StateSpaceLearningjl package offers a convenient approach for managing intermittent series. Within the simulate function, the seasonal_innovation_simulation hyperparameter can be configured to ensure that the variability in the simulations also exhibits a seasonal pattern.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We first execute the code with the default parameters to highlight the importance of adapting the model to handle this type of time series effectively:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.ARTIFICIAL_SOLARS) |> DataFrame\ny = solars[!, \"y1\"]\nT = length(y)\nsteps_ahead = 48\n\nmodel = StructuralModel(y; freq_seasonal=24, slope=\"none\", level=\"none\", outlier=false)\nfit!(model; penalize_initial_states=false)\nsimulation = StateSpaceLearning.simulate(model, steps_ahead, 100) #Gets a 12 steps ahead prediction\nplot_scenarios(y, simulation)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: solar_sim_raw)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now we present the results by setting the seasonal_innovation_simulation hyperparameter to 24 (given that it is a solar hourly time series).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.ARTIFICIAL_SOLARS) |> DataFrame\ny = solars[!, \"y1\"]\nT = length(y)\nsteps_ahead = 48\n\nmodel = StructuralModel(y; freq_seasonal=24, slope=\"none\", level=\"none\", outlier = false)\nfit!(model; penalize_initial_states=false)\nsimulation = StateSpaceLearning.simulate(model, steps_ahead, 100; seasonal_innovation_simulation=24) #Gets a 12 steps ahead prediction\nplot_scenarios(y, simulation)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: solar_sim_treated)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Thus, the model has demonstrated its capability to effectively capture the intermittent nature of the solar time series, providing a more accurate representation of its underlying characteristics.","category":"page"},{"location":"examples/#Forecasting-with-Multiple-Seasonality","page":"Examples","title":"Forecasting with Multiple Seasonality","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The StateSpaceLearningjl package handles multiple seasonality by passing parameter freq_seasonal as a vector of Int in the StructuralModel instantiation.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We first execute the code considering a single daily seasonality (freq_seasonal=24) to highlight the importance of adapting the model to handle this type of time series effectively:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.HOURLY_M4_EXAMPLE) |> DataFrame\ny = solars[!, \"values\"]\nT = length(y)\nsteps_ahead = 168\n\nmodel = StructuralModel(y; freq_seasonal=168)\nfit!(model)\nprediction = StateSpaceLearning.forecast(model, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\n\nplot_point_forecast(y, prediction)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: one_seas)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that the model successfully captured the daily seasonality but, as expected, was unable to capture the weekly seasonality. We now present the results after setting the freq\\_seasonal hyperparameter to [24, 168], accounting for both daily and weekly seasonalities.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CSV, DataFrames, Plots, StateSpaceLearning\n\nsolars = CSV.File(StateSpaceLearning.HOURLY_M4_EXAMPLE) |> DataFrame\ny = solars[!, \"values\"]\nT = length(y)\nsteps_ahead = 168\n\nmodel = StructuralModel(y; freq_seasonal=[24, 168])\nfit!(model)\nprediction = StateSpaceLearning.forecast(model, steps_ahead) # arguments are the output of the fitted model and number of steps ahead the user wants to forecast\n\nplot_point_forecast(y, prediction)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: two_seas)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that the model was able to capture both seasonalities in this case.","category":"page"},{"location":"examples/#Dynamic-Exogenous-Coefficients","page":"Examples","title":"Dynamic Exogenous Coefficients","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Dynamic exogenous coefficients allow the effect of exogenous variables to vary over time with specific patterns (e.g., level, slope, seasonal or cyclical). This is configured through the dynamic_exog_coefs parameter in the StructuralModel constructor.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The dynamic_exog_coefs parameter accepts a vector of tuples, where each tuple contains:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First element: A vector of an exogenous variable\nSecond element: The name of the component that the exogenous variable will be associated with\nThird element (optional): For the seasonal component, the freqseasonal parameter and for cycle component, the cycleperiod parameter.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For example:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Make X1's effect vary annually and X2's effect vary semi-annually\nairp = CSV.File(StateSpaceLearning.AIR_PASSENGERS) |> DataFrame\ny = log.(airp.passengers)\nX = vcat(collect(1:90), collect(90.5:-0.5:64)) + (rand(144) .* 10)\ny += X * -0.03\n\ndynamic_coefs = [(X, \"level\")]\n\nmodel = StructuralModel(y;\n    dynamic_exog_coefs=dynamic_coefs\n)\n\nfit!(model)\n\nprediction = forecast(model, 30; dynamic_exog_coefs_forecasts = [collect(63.5:-0.5:49)])\n\nplot_point_forecast(y, prediction)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: dynamic_exog)","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Quickstart","page":"Manual","title":"Quickstart","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"While StateSpaceModels.jl offers a rich array of functionalities, diverse models, and flexible interfaces, most users primarily seek to achieve core tasks: fitting a model and generating forecasts. The following example provides a concise introduction to performing these essential operations effectively.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using StateSpaceLearning\n\ny = randn(100)\n\n# Instantiate Model\nmodel = StructuralModel(y)\n\n# Fit Model\nfit!(model)\n\n# Point Forecast\nprediction = StateSpaceLearning.forecast(model, 12) #Gets a 12 steps ahead prediction\n\n# Scenarios Path Simulation\nsimulation = StateSpaceLearning.simulate(model, 12, 1000) #Gets 1000 scenarios path of 12 steps ahead predictions","category":"page"},{"location":"manual/#Models","page":"Manual","title":"Models","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package currently supports the implementation of the StructuralModel, which includes capabilities for handling dynamic exogenous coefficients. If you have suggestions for additional models to include, we encourage you to contribute by opening an issue or submitting a pull request.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nWhen using dynamic coefficients:\n- The model will create time-varying coefficients for each specified exogenous variable\n- Each coefficient will follow the specified cyclical pattern\n- When forecasting, you must provide future values for exogenous variables using the `Exogenous_Forecast` parameter\n","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@docs StateSpaceLearning.StructuralModel","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\n## Fitting\n\nThe package currently only allows for the estimation procedure (based on the elastic net) presented in the paper \"Time Series Analysis by State Space Learning\". We allow some parameters configurations as detailed below. If you have suggestions for additional estimation procedures to include, we encourage you to contribute by opening an issue or submitting a pull request.\n","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@docs StateSpaceLearning.fit!","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\n## Forecasting and Simulating\n\nThe package has functions to make point forecasts multiple steps ahead and to simulate scenarios based on those forecasts. These functions are implemented for both univariate and multivariate cases, with support for exogenous variables and dynamic coefficients.\n\nWhen using models with exogenous variables:\n- For standard exogenous variables, provide future values using the `Exogenous_Forecast` parameter\n- For dynamic coefficients, use the same `Exogenous_Forecast` parameter with values for each exogenous variable\n","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@docs StateSpaceLearning.forecast","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@docs StateSpaceLearning.simulate","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\n## Datasets\nThe package includes several datasets designed to demonstrate its functionalities and showcase the models. These datasets are stored as CSV files, and their file paths can be accessed either by their names as shown below. In the examples, we utilize DataFrames.jl and CSV.jl to illustrate how to work with these datasets.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@docs StateSpaceLearning.AIR_PASSENGERS","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@docs StateSpaceLearning.ARTIFICIAL_SOLARS","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"@docs StateSpaceLearning.HOURLYM4EXAMPLE ```","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div style=\"width:100%; height:150px;border-width:4px;border-style:solid;padding-top:25px;\n        border-color:#000;border-radius:10px;text-align:center;background-color:#99DDFF;\n        color:#000\">\n    <h3 style=\"color: black;\">Star us on GitHub!</h3>\n    <a class=\"github-button\" href=\"https://github.com/LAMPSPUC/StateSpaceLearning.jl\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star LAMPSPUC/StateSpaceLearning.jl on GitHub\" style=\"margin:auto\">Star</a>\n    <script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n</div>","category":"page"},{"location":"#StateSpaceLearning.jl-Documentation","page":"Home","title":"StateSpaceLearning.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StateSpaceLearning.jl is a package for modeling and forecasting time series in a high-dimension regression framework.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is registered so you can simply add it using Julia's Pkg manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg.add(\"StateSpaceLearning\")","category":"page"},{"location":"#Citing-StateSpaceLearning.jl","page":"Home","title":"Citing StateSpaceLearning.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use StateSpaceLearning.jl in your work, we kindly ask you to cite the following preprint (pdf):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@misc{ramos2024timeseriesanalysisstate,       title={Time Series Analysis by State Space Learning},        author={André Ramos and Davi Valladão and Alexandre Street},       year={2024},       eprint={2408.09120},       archivePrefix={arXiv},       primaryClass={stat.ML},       url={https://arxiv.org/abs/2408.09120},  }","category":"page"}]
}
